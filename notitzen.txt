✅ Step 1: Where does $user['username'] come from?
You did:

php

$user = $result->fetch_assoc();
That gives you an associative array like:

[
  'username' => 'coolboy123',
  'password' => '$2y$10... (hashed)'
]
So yes — now $user['username'] is the logged-in username pulled from the database.



🧠 What is $stmt?
Think of $stmt as short for “statement” — more specifically:

A prepared statement that gets sent to the database.

🔧 So what does $stmt = $conn->prepare($query) do?
It prepares a SQL query (with placeholders like ?) before it actually sends data to the database.

Why?

To prevent SQL injection.

To allow safely binding real values later (bind_param).

You’re basically telling MySQL:

"Hey, I’m gonna run a query like SELECT * FROM users WHERE username = ? — I’ll tell you what ? should be in a sec.”


index login: 
Yes! 🔥 Richtig gedacht und super erklärt!

get_result() gibt dir die ganze Ergebnismenge – stell dir das vor wie eine Tabelle mit Zeilen und Spalten.
fetch_assoc() holt sich davon eine einzelne Zeile (z. B. vom passenden User) und gibt sie dir als assoziatives Array zurück, z. B.:

php
Kopieren
Bearbeiten
[
  "username" => "cooluser",
  "password" => "$2y$10$...."
]
Das brauchst du, um dann z. B. auf $user['password'] zugreifen zu können – genau wie du’s gesagt hast.




CREATE TABLE notes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id)
); Foreign key references setzt die relation. also createdby spalte ist gleich id vom user in user table.


var dump zum debuggen